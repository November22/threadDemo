    1.线程安全的集合的问题：
        a.集合在遍历过程中被其他线程修改。会抛出ConcurrentModificationException的异常。
        b.同步的集合经常被多条线程频繁的访问，性能就成了问题。

    2.并发工具类通过并发集合来解决这些问题。并发集合是具有高并发性能和高扩展性、面向集合的类型，
他们存储在java.util.concurrent包中。面向集合的类型返回了【弱一致性】的迭代器。具备以下属性：
        a.迭代开始之后，被删除但还没有通过迭代器的next()方法返回的元素，就不会再返回了。
        b.迭代开始之后添加的元素，可能返回也不可能不返回。
        c.在集合迭代过程中，几遍对集合做了改变，也没有任何元素会返回超过一次。

    3.并发集合样例
        a.BlockingQueue[PS:是阻塞式的【ConcurrentLinkedQueue不是阻塞式的】]是接口java.util.Queue的子接口，
    它支持阻塞操作，即在获取一个元素获取之前，等待队列成为非空；在存储一个元素之前，等待队列中的空间变为可用。
        b.ConcurrentMap是java.util.Map的子接口，声明了额外的原子方法putIfAbsent()、remove()和replace().


