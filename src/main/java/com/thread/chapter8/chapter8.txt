    1.线程安全的集合的问题：
        a.集合在遍历过程中被其他线程修改。会抛出ConcurrentModificationException的异常。
        b.同步的集合经常被多条线程频繁的访问，性能就成了问题。

    2.并发工具类通过并发集合来解决这些问题。并发集合是具有高并发性能和高扩展性、面向集合的类型，
他们存储在java.util.concurrent包中。面向集合的类型返回了【弱一致性】的迭代器。具备以下属性：
        a.迭代开始之后，被删除但还没有通过迭代器的next()方法返回的元素，就不会再返回了。
        b.迭代开始之后添加的元素，可能返回也不可能不返回。
        c.在集合迭代过程中，即便对集合做了改变，也没有任何元素会返回超过一次。

    3.并发集合样例
        a.BlockingQueue[PS:是阻塞式的【ConcurrentLinkedQueue不是阻塞式的】]是接口java.util.Queue的子接口，
    它支持阻塞操作，即在获取一个元素获取之前，等待队列成为非空；在存储一个元素之前，等待队列中的空间变为可用。
        b.ConcurrentMap是java.util.Map的子接口，声明了额外的原子方法putIfAbsent()、remove()和replace().

    4.ConcurrentHashMap
        a.无需显式同步就可以作用于多线程上下文。

    5.CAS（Compare-and-swap）
        a.一个针对非抢占式微处理器的一条指令的宽泛术语。这条指令读取内存的位置，比较读到的值和期望的值，
    当读到的值和期望的值匹配时，就将新值存储到该内存的位置；否则什么也不会发生。

        b.锁的分类：独占锁（悲观锁），乐观锁
            i.独占锁：synchronized就是一种独占锁，它会导致所有需要此锁的线程挂起，等待锁的释放。
            ii.乐观锁：每次不加锁去完成操作，如果因为冲突失败就重试，直到成功。

        c.CAS的机制就相当于这种（非阻塞算法），CAS是由CPU硬件实现，所以执行相当快。
    CAS有三个操作参数：内存地址，期望值，要修改的新值， 当期望值和内存当中的值进行比较不相等的时候，
    表示内存中的值已经被别线程改动过，这时候失败返回，当相等的时候，将内存中的值改为新的值，并返回成功。

    java.util.concurrent.atomic.AtomicLong为例：
    public final long getAndIncrement() {
            while (true) {
                long current = get();
                long next = current + 1;
                //当+1操作成功的时候直接返回，退出此循环
                if (compareAndSet(current, next))
                    return current;
            }
        }
        //调用JNI实现CAS
        public final boolean compareAndSet(long expect, long update) {
        return unsafe.compareAndSwapLong(this, valueOffset, expect, update);
    }


